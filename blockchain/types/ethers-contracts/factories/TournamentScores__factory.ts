/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type { Addressable } from "ethers";
import { Contract, ContractFactory, ContractTransactionResponse, Interface } from "ethers"
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers"
import type { NonPayableOverrides } from "../common.js"
  import type { TournamentScores, TournamentScoresInterface } from "../TournamentScores.js";

  const _abi = [
  {
    "inputs": [],
    "stateMutability": "nonpayable",
    "type": "constructor"
  },
  {
    "anonymous": false,
    "inputs": [
      {
        "indexed": true,
        "internalType": "uint256",
        "name": "tournamentId",
        "type": "uint256"
      },
      {
        "indexed": false,
        "internalType": "address",
        "name": "winner",
        "type": "address"
      },
      {
        "indexed": false,
        "internalType": "string",
        "name": "winnerUsername",
        "type": "string"
      },
      {
        "indexed": false,
        "internalType": "uint256",
        "name": "finalScore",
        "type": "uint256"
      },
      {
        "indexed": false,
        "internalType": "uint256",
        "name": "timestamp",
        "type": "uint256"
      }
    ],
    "name": "TournamentRecorded",
    "type": "event"
  },
  {
    "inputs": [
      {
        "internalType": "uint256",
        "name": "_tournamentId",
        "type": "uint256"
      }
    ],
    "name": "getTournament",
    "outputs": [
      {
        "internalType": "uint256",
        "name": "tournamentId",
        "type": "uint256"
      },
      {
        "internalType": "uint256",
        "name": "timestamp",
        "type": "uint256"
      },
      {
        "internalType": "address",
        "name": "winner",
        "type": "address"
      },
      {
        "internalType": "string",
        "name": "winnerUsername",
        "type": "string"
      },
      {
        "internalType": "uint256",
        "name": "finalScore",
        "type": "uint256"
      },
      {
        "internalType": "string[]",
        "name": "participants",
        "type": "string[]"
      },
      {
        "internalType": "bool",
        "name": "verified",
        "type": "bool"
      }
    ],
    "stateMutability": "view",
    "type": "function"
  },
  {
    "inputs": [],
    "name": "getTournamentCount",
    "outputs": [
      {
        "internalType": "uint256",
        "name": "",
        "type": "uint256"
      }
    ],
    "stateMutability": "view",
    "type": "function"
  },
  {
    "inputs": [],
    "name": "owner",
    "outputs": [
      {
        "internalType": "address",
        "name": "",
        "type": "address"
      }
    ],
    "stateMutability": "view",
    "type": "function"
  },
  {
    "inputs": [
      {
        "internalType": "uint256",
        "name": "_tournamentId",
        "type": "uint256"
      },
      {
        "internalType": "address",
        "name": "_winner",
        "type": "address"
      },
      {
        "internalType": "string",
        "name": "_winnerUsername",
        "type": "string"
      },
      {
        "internalType": "uint256",
        "name": "_finalScore",
        "type": "uint256"
      },
      {
        "internalType": "string[]",
        "name": "_participants",
        "type": "string[]"
      }
    ],
    "name": "recordTournament",
    "outputs": [],
    "stateMutability": "nonpayable",
    "type": "function"
  },
  {
    "inputs": [
      {
        "internalType": "uint256",
        "name": "",
        "type": "uint256"
      }
    ],
    "name": "tournamentIds",
    "outputs": [
      {
        "internalType": "uint256",
        "name": "",
        "type": "uint256"
      }
    ],
    "stateMutability": "view",
    "type": "function"
  },
  {
    "inputs": [
      {
        "internalType": "uint256",
        "name": "",
        "type": "uint256"
      }
    ],
    "name": "tournaments",
    "outputs": [
      {
        "internalType": "uint256",
        "name": "tournamentId",
        "type": "uint256"
      },
      {
        "internalType": "uint256",
        "name": "timestamp",
        "type": "uint256"
      },
      {
        "internalType": "address",
        "name": "winner",
        "type": "address"
      },
      {
        "internalType": "string",
        "name": "winnerUsername",
        "type": "string"
      },
      {
        "internalType": "uint256",
        "name": "finalScore",
        "type": "uint256"
      },
      {
        "internalType": "bool",
        "name": "verified",
        "type": "bool"
      }
    ],
    "stateMutability": "view",
    "type": "function"
  },
  {
    "inputs": [
      {
        "internalType": "uint256",
        "name": "_tournamentId",
        "type": "uint256"
      }
    ],
    "name": "verifyTournament",
    "outputs": [
      {
        "internalType": "bool",
        "name": "",
        "type": "bool"
      }
    ],
    "stateMutability": "view",
    "type": "function"
  }
] as const;

  const _bytecode = "0x6080604052348015600e575f5ffd5b503360025f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506113028061005c5f395ff3fe608060405234801561000f575f5ffd5b506004361061007b575f3560e01c806365a74ff71161005957806365a74ff7146101035780637503e1b71461011f5780638da5cb5b14610154578063b2640c15146101725761007b565b8063078c51f01461007f5780631a5bd7fc1461009d57806349524aad146100d3575b5f5ffd5b6100876101a2565b60405161009491906108a1565b60405180910390f35b6100b760048036038101906100b291906108f5565b6101ae565b6040516100ca9796959493929190610aec565b60405180910390f35b6100ed60048036038101906100e891906108f5565b610401565b6040516100fa91906108a1565b60405180910390f35b61011d60048036038101906101189190610d9f565b610421565b005b610139600480360381019061013491906108f5565b610682565b60405161014b96959493929190610e4e565b60405180910390f35b61015c61076a565b6040516101699190610eb4565b60405180910390f35b61018c600480360381019061018791906108f5565b61078f565b6040516101999190610ecd565b60405180910390f35b5f600180549050905090565b5f5f5f60605f60605f5f5f5f8a81526020019081526020015f206040518060e00160405290815f820154815260200160018201548152602001600282015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160038201805461024b90610f13565b80601f016020809104026020016040519081016040528092919081815260200182805461027790610f13565b80156102c25780601f10610299576101008083540402835291602001916102c2565b820191905f5260205f20905b8154815290600101906020018083116102a557829003601f168201915b505050505081526020016004820154815260200160058201805480602002602001604051908101604052809291908181526020015f905b828210156103a1578382905f5260205f2001805461031690610f13565b80601f016020809104026020016040519081016040528092919081815260200182805461034290610f13565b801561038d5780601f106103645761010080835404028352916020019161038d565b820191905f5260205f20905b81548152906001019060200180831161037057829003601f168201915b5050505050815260200190600101906102f9565b505050508152602001600682015f9054906101000a900460ff1615151515815250509050805f015181602001518260400151836060015184608001518560a001518660c00151975097509750975097509750975050919395979092949650565b60018181548110610410575f80fd5b905f5260205f20015f915090505481565b60025f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146104b0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104a790610f8d565b60405180910390fd5b5f5f5f8781526020019081526020015f205f015414610504576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104fb90610ff5565b60405180910390fd5b6040518060e001604052808681526020014281526020018573ffffffffffffffffffffffffffffffffffffffff168152602001848152602001838152602001828152602001600115158152505f5f8781526020019081526020015f205f820151815f0155602082015181600101556040820151816002015f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060608201518160030190816105cd91906111b3565b506080820151816004015560a08201518160050190805190602001906105f49291906107b7565b5060c0820151816006015f6101000a81548160ff021916908315150217905550905050600185908060018154018082558091505060019003905f5260205f20015f9091909190915055847f609122b7577f6ff417b1e7ac3901c9cbfec8ddf7b2de3354d790df80168cb4bf858585426040516106739493929190611282565b60405180910390a25050505050565b5f602052805f5260405f205f91509050805f015490806001015490806002015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060030180546106d190610f13565b80601f01602080910402602001604051908101604052809291908181526020018280546106fd90610f13565b80156107485780601f1061071f57610100808354040283529160200191610748565b820191905f5260205f20905b81548152906001019060200180831161072b57829003601f168201915b505050505090806004015490806006015f9054906101000a900460ff16905086565b60025f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b5f5f5f8381526020019081526020015f206006015f9054906101000a900460ff169050919050565b828054828255905f5260205f209081019282156107fd579160200282015b828111156107fc5782518290816107ec91906111b3565b50916020019190600101906107d5565b5b50905061080a919061080e565b5090565b5b8082111561082d575f81816108249190610831565b5060010161080f565b5090565b50805461083d90610f13565b5f825580601f1061084e575061086b565b601f0160209004905f5260205f209081019061086a919061086e565b5b50565b5b80821115610885575f815f90555060010161086f565b5090565b5f819050919050565b61089b81610889565b82525050565b5f6020820190506108b45f830184610892565b92915050565b5f604051905090565b5f5ffd5b5f5ffd5b6108d481610889565b81146108de575f5ffd5b50565b5f813590506108ef816108cb565b92915050565b5f6020828403121561090a576109096108c3565b5b5f610917848285016108e1565b91505092915050565b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f61094982610920565b9050919050565b6109598161093f565b82525050565b5f81519050919050565b5f82825260208201905092915050565b8281835e5f83830152505050565b5f601f19601f8301169050919050565b5f6109a18261095f565b6109ab8185610969565b93506109bb818560208601610979565b6109c481610987565b840191505092915050565b5f81519050919050565b5f82825260208201905092915050565b5f819050602082019050919050565b5f82825260208201905092915050565b5f610a128261095f565b610a1c81856109f8565b9350610a2c818560208601610979565b610a3581610987565b840191505092915050565b5f610a4b8383610a08565b905092915050565b5f602082019050919050565b5f610a69826109cf565b610a7381856109d9565b935083602082028501610a85856109e9565b805f5b85811015610ac05784840389528151610aa18582610a40565b9450610aac83610a53565b925060208a01995050600181019050610a88565b50829750879550505050505092915050565b5f8115159050919050565b610ae681610ad2565b82525050565b5f60e082019050610aff5f83018a610892565b610b0c6020830189610892565b610b196040830188610950565b8181036060830152610b2b8187610997565b9050610b3a6080830186610892565b81810360a0830152610b4c8185610a5f565b9050610b5b60c0830184610add565b98975050505050505050565b610b708161093f565b8114610b7a575f5ffd5b50565b5f81359050610b8b81610b67565b92915050565b5f5ffd5b5f5ffd5b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b610bcf82610987565b810181811067ffffffffffffffff82111715610bee57610bed610b99565b5b80604052505050565b5f610c006108ba565b9050610c0c8282610bc6565b919050565b5f67ffffffffffffffff821115610c2b57610c2a610b99565b5b610c3482610987565b9050602081019050919050565b828183375f83830152505050565b5f610c61610c5c84610c11565b610bf7565b905082815260208101848484011115610c7d57610c7c610b95565b5b610c88848285610c41565b509392505050565b5f82601f830112610ca457610ca3610b91565b5b8135610cb4848260208601610c4f565b91505092915050565b5f67ffffffffffffffff821115610cd757610cd6610b99565b5b602082029050602081019050919050565b5f5ffd5b5f610cfe610cf984610cbd565b610bf7565b90508083825260208201905060208402830185811115610d2157610d20610ce8565b5b835b81811015610d6857803567ffffffffffffffff811115610d4657610d45610b91565b5b808601610d538982610c90565b85526020850194505050602081019050610d23565b5050509392505050565b5f82601f830112610d8657610d85610b91565b5b8135610d96848260208601610cec565b91505092915050565b5f5f5f5f5f60a08688031215610db857610db76108c3565b5b5f610dc5888289016108e1565b9550506020610dd688828901610b7d565b945050604086013567ffffffffffffffff811115610df757610df66108c7565b5b610e0388828901610c90565b9350506060610e14888289016108e1565b925050608086013567ffffffffffffffff811115610e3557610e346108c7565b5b610e4188828901610d72565b9150509295509295909350565b5f60c082019050610e615f830189610892565b610e6e6020830188610892565b610e7b6040830187610950565b8181036060830152610e8d8186610997565b9050610e9c6080830185610892565b610ea960a0830184610add565b979650505050505050565b5f602082019050610ec75f830184610950565b92915050565b5f602082019050610ee05f830184610add565b92915050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602260045260245ffd5b5f6002820490506001821680610f2a57607f821691505b602082108103610f3d57610f3c610ee6565b5b50919050565b7f4f6e6c79206f776e65722063616e2063616c6c207468697300000000000000005f82015250565b5f610f77601883610969565b9150610f8282610f43565b602082019050919050565b5f6020820190508181035f830152610fa481610f6b565b9050919050565b7f546f75726e616d656e7420616c7265616479207265636f7264656400000000005f82015250565b5f610fdf601b83610969565b9150610fea82610fab565b602082019050919050565b5f6020820190508181035f83015261100c81610fd3565b9050919050565b5f819050815f5260205f209050919050565b5f6020601f8301049050919050565b5f82821b905092915050565b5f6008830261106f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82611034565b6110798683611034565b95508019841693508086168417925050509392505050565b5f819050919050565b5f6110b46110af6110aa84610889565b611091565b610889565b9050919050565b5f819050919050565b6110cd8361109a565b6110e16110d9826110bb565b848454611040565b825550505050565b5f5f905090565b6110f86110e9565b6111038184846110c4565b505050565b5b818110156111265761111b5f826110f0565b600181019050611109565b5050565b601f82111561116b5761113c81611013565b61114584611025565b81016020851015611154578190505b61116861116085611025565b830182611108565b50505b505050565b5f82821c905092915050565b5f61118b5f1984600802611170565b1980831691505092915050565b5f6111a3838361117c565b9150826002028217905092915050565b6111bc8261095f565b67ffffffffffffffff8111156111d5576111d4610b99565b5b6111df8254610f13565b6111ea82828561112a565b5f60209050601f83116001811461121b575f8415611209578287015190505b6112138582611198565b86555061127a565b601f19841661122986611013565b5f5b828110156112505784890151825560018201915060208501945060208101905061122b565b8683101561126d5784890151611269601f89168261117c565b8355505b6001600288020188555050505b505050505050565b5f6080820190506112955f830187610950565b81810360208301526112a78186610997565b90506112b66040830185610892565b6112c36060830184610892565b9594505050505056fea264697066735822122001f2e66d11c4286e206792fc2d12266cbb1dc36b6378cd6725329cd644578dfb64736f6c634300081c0033";

  
      type TournamentScoresConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>;

      const isSuperArgs = (xs: TournamentScoresConstructorParams): xs is ConstructorParameters<typeof ContractFactory> =>
        xs.length > 1
    

  export class TournamentScores__factory extends ContractFactory {
    
      constructor(...args: TournamentScoresConstructorParams) {
        if (isSuperArgs(args)) {
          super(...args);
        } else {
          super(_abi, _bytecode, args[0]);
        }
        
      }
    
    override getDeployTransaction(overrides?: NonPayableOverrides & { from?: string }): Promise<ContractDeployTransaction> {
      return super.getDeployTransaction(overrides || {});
    };
    override deploy(overrides?: NonPayableOverrides & { from?: string }) {
      return super.deploy(overrides || {}) as Promise<TournamentScores & {
        deploymentTransaction(): ContractTransactionResponse;
      }>;
    }
    override connect(runner: ContractRunner | null): TournamentScores__factory {
      return super.connect(runner) as TournamentScores__factory;
    }
    
    
    static readonly bytecode = _bytecode;
    static readonly abi = _abi;
    static createInterface(): TournamentScoresInterface {
      return new Interface(_abi) as TournamentScoresInterface;
    }
    
    override attach(address: string | Addressable): TournamentScores {
      return super.attach(address) as TournamentScores;
    }
  static connect(address: string, runner?: ContractRunner | null): TournamentScores {
      return new Contract(address, _abi, runner) as unknown as TournamentScores;
    }
  }

  
  