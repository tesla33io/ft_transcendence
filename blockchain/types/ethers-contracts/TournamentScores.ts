/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type { BaseContract, BigNumberish, BytesLike, FunctionFragment, Result, Interface, EventFragment, AddressLike, ContractRunner, ContractMethod, Listener } from "ethers"
import type { TypedContractEvent, TypedDeferredTopicFilter, TypedEventLog, TypedLogDescription, TypedListener, TypedContractMethod } from "./common.js"
  

  export interface TournamentScoresInterface extends Interface {
    getFunction(nameOrSignature: "getTournament" | "getTournamentCount" | "owner" | "recordTournament" | "tournamentIds" | "tournaments" | "verifyTournament"): FunctionFragment;

    getEvent(nameOrSignatureOrTopic: "TournamentRecorded"): EventFragment;

    encodeFunctionData(functionFragment: 'getTournament', values: [BigNumberish]): string;
encodeFunctionData(functionFragment: 'getTournamentCount', values?: undefined): string;
encodeFunctionData(functionFragment: 'owner', values?: undefined): string;
encodeFunctionData(functionFragment: 'recordTournament', values: [BigNumberish, AddressLike, string, BigNumberish, string[]]): string;
encodeFunctionData(functionFragment: 'tournamentIds', values: [BigNumberish]): string;
encodeFunctionData(functionFragment: 'tournaments', values: [BigNumberish]): string;
encodeFunctionData(functionFragment: 'verifyTournament', values: [BigNumberish]): string;

    decodeFunctionResult(functionFragment: 'getTournament', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'getTournamentCount', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'recordTournament', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'tournamentIds', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'tournaments', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'verifyTournament', data: BytesLike): Result;
  }

  
    export namespace TournamentRecordedEvent {
      export type InputTuple = [tournamentId: BigNumberish, winner: AddressLike, winnerUsername: string, finalScore: BigNumberish, timestamp: BigNumberish];
      export type OutputTuple = [tournamentId: bigint, winner: string, winnerUsername: string, finalScore: bigint, timestamp: bigint];
      export interface OutputObject {tournamentId: bigint, winner: string, winnerUsername: string, finalScore: bigint, timestamp: bigint };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

  export interface TournamentScores extends BaseContract {
    
    connect(runner?: ContractRunner | null): TournamentScores;
    waitForDeployment(): Promise<this>;

    interface: TournamentScoresInterface;

    
  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TypedEventLog<TCEvent>>>
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>
  on<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>
  
  once<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>
  once<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>
  removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>


    
    
    getTournament: TypedContractMethod<
      [_tournamentId: BigNumberish, ],
      [[bigint, bigint, string, string, bigint, string[], boolean] & {tournamentId: bigint, timestamp: bigint, winner: string, winnerUsername: string, finalScore: bigint, participants: string[], verified: boolean }],
      'view'
    >
    

    
    getTournamentCount: TypedContractMethod<
      [],
      [bigint],
      'view'
    >
    

    
    owner: TypedContractMethod<
      [],
      [string],
      'view'
    >
    

    
    recordTournament: TypedContractMethod<
      [_tournamentId: BigNumberish, _winner: AddressLike, _winnerUsername: string, _finalScore: BigNumberish, _participants: string[], ],
      [void],
      'nonpayable'
    >
    

    
    tournamentIds: TypedContractMethod<
      [arg0: BigNumberish, ],
      [bigint],
      'view'
    >
    

    
    tournaments: TypedContractMethod<
      [arg0: BigNumberish, ],
      [[bigint, bigint, string, string, bigint, boolean] & {tournamentId: bigint, timestamp: bigint, winner: string, winnerUsername: string, finalScore: bigint, verified: boolean }],
      'view'
    >
    

    
    verifyTournament: TypedContractMethod<
      [_tournamentId: BigNumberish, ],
      [boolean],
      'view'
    >
    


    getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T;

    getFunction(nameOrSignature: 'getTournament'): TypedContractMethod<
      [_tournamentId: BigNumberish, ],
      [[bigint, bigint, string, string, bigint, string[], boolean] & {tournamentId: bigint, timestamp: bigint, winner: string, winnerUsername: string, finalScore: bigint, participants: string[], verified: boolean }],
      'view'
    >;
getFunction(nameOrSignature: 'getTournamentCount'): TypedContractMethod<
      [],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'owner'): TypedContractMethod<
      [],
      [string],
      'view'
    >;
getFunction(nameOrSignature: 'recordTournament'): TypedContractMethod<
      [_tournamentId: BigNumberish, _winner: AddressLike, _winnerUsername: string, _finalScore: BigNumberish, _participants: string[], ],
      [void],
      'nonpayable'
    >;
getFunction(nameOrSignature: 'tournamentIds'): TypedContractMethod<
      [arg0: BigNumberish, ],
      [bigint],
      'view'
    >;
getFunction(nameOrSignature: 'tournaments'): TypedContractMethod<
      [arg0: BigNumberish, ],
      [[bigint, bigint, string, string, bigint, boolean] & {tournamentId: bigint, timestamp: bigint, winner: string, winnerUsername: string, finalScore: bigint, verified: boolean }],
      'view'
    >;
getFunction(nameOrSignature: 'verifyTournament'): TypedContractMethod<
      [_tournamentId: BigNumberish, ],
      [boolean],
      'view'
    >;

    getEvent(key: 'TournamentRecorded'): TypedContractEvent<TournamentRecordedEvent.InputTuple, TournamentRecordedEvent.OutputTuple, TournamentRecordedEvent.OutputObject>;

    filters: {
      
      'TournamentRecorded(uint256,address,string,uint256,uint256)': TypedContractEvent<TournamentRecordedEvent.InputTuple, TournamentRecordedEvent.OutputTuple, TournamentRecordedEvent.OutputObject>;
      TournamentRecorded: TypedContractEvent<TournamentRecordedEvent.InputTuple, TournamentRecordedEvent.OutputTuple, TournamentRecordedEvent.OutputObject>;
    
    };
  }